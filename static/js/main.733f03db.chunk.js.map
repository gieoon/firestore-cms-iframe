{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Quill","document","quills","useState","editing","setEditing","currentData","setCurrentData","useEffect","window","setInterval","addEditButton","receivedMessage","evt","highlightEditable","head","link","Array","el","console","dw","d","editorContainer","d2","d3","saveClicked","cancelClicked","createEditInput","e","parentElement","getCssSelector","currentText","dbObj","sections","val","extractElementContent","actionType","toolbarOptions","matchIndex","firstText","quill","modules","toolbar","theme","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.733f03db.chunk.js","sourcesContent":["import React, {useEffect, useState, ReactDOM} from 'react';\n// This is shared code for all CMS listeners.\n// Listens to events from login.<domain-name>.craftie.xyz, \n// Edits the page after events are received.\nimport Quill from 'quill';\n// import ReactQuill from 'react-quill';\n// import 'react-quill/dist/quill.snow.css';\nimport getCssSelector from 'css-selector-generator';\n\nQuill.prototype.getHTML = () => {\n    return document.querySelector('.ql-editor').innerHTML;\n};\n\nQuill.prototype.setHTML = (html) => {\n    document.querySelector('.ql-editor').innerHTML = html;\n}\n\nconst quills = {};\n\nexport default function CMS(){\n\n    const [editing, setEditing] = useState(/*TODO make this false */true);\n    // const [showEditor, setShowingEditor] = useState();\n    const [currentData, setCurrentData] = useState();\n    \n    useEffect(()=>{\n        // Listen to CMS websitecontent editing events.\n        window.addEventListener(\"message\", receivedMessage, false);\n\n        // console.log('HIGHLIGHTING');\n        // TODO remove this, this is only to be prompted by the parent from Craftie.xyz.\n        // highlightEditable({origin: allowedOrigin, data: \"startEdit\"});\n\n        setInterval(() => {\n            addEditButton();\n        }, 1500);\n\n    }, []);\n\n    // useEffect(()=>{\n    //     console.log('currentData: ', currentData);\n    // }, [currentData]);\n\n    // Handles received messages from parent.\n    const receivedMessage = (evt) => {\n        // console.log('Received event Evt.data: ', evt.data);\n        // 'highlight'\n        if(!evt.origin.includes(\"login.bush_and_beyond\")) return;\n\n        if(evt.data.actionType === 'startEdit'){\n            highlightEditable();\n            // console.log(\"evt.data: \", evt.data);\n            setCurrentData(evt.data.websiteContent);\n        } else {\n            // console.log('Editing not allowed: ', evt.origin);\n        }\n    }\n\n    useEffect(() => {\n        var head = document.head;\n        var link = document.createElement(\"link\");\n    \n        link.type = \"text/css\";\n        link.rel = \"stylesheet\";\n        link.href = \"https://cdn.quilljs.com/1.3.6/quill.snow.css\";\n    \n        head.appendChild(link);\n    \n        return () => { head.removeChild(link); }\n    }, []);\n\n    // useEffect(()=>{\n    //     console.log('Adding');\n    //     if(editing){\n    //         addEditButton();\n    //     }\n    // });\n\n    const addEditButton = () => {\n        const elements = Array.from(\n            document.querySelectorAll('.cp-editable')\n        );\n        // console.log(\"editable elements: \", elements[2]);\n        for(var el of elements){\n            // console.log('el.querySelector(.cp-editable-btn): ', el.querySelector('.cp-editable-btn') === undefined);\n\n            if(!el.querySelector('.cp-editable-btn')){\n                console.log('Adding button');\n                const dw = document.createElement('div');\n                dw.classList.add(\"cp-editable-btn-wrapper\");\n                // console.log('Adding edit button to element: #', el, el.querySelector('.cp-editable-btn'));\n                const d = document.createElement('div');\n                const editorContainer = document.createElement('div');\n                d.textContent = \"Edit\";\n                // const img = document.createElement('img');\n                // img.src = \"\";\n                d.classList.add('cp-editable-btn');\n                editorContainer.classList.add('editor-wrapper');\n                \n                const d2 = document.createElement('div');\n                d2.textContent = \"Save\";\n                d2.classList.add('cp-editable-save-btn');\n                \n\n                const d3 = document.createElement('div');\n                d3.textContent = \"Cancel\";\n                d3.classList.add('cp-editable-cancel-btn');\n                \n                d2.onclick = (e) => {\n                    saveClicked(e);\n                }\n\n                d3.onclick = (e) => {\n                    cancelClicked(e);\n                }\n                \n                d.onclick = (e) => {\n                    createEditInput(e);\n                }\n                el.appendChild(editorContainer);\n                dw.appendChild(d);\n                dw.appendChild(d2);\n                dw.appendChild(d3);\n                el.appendChild(dw);\n            }\n\n        }\n    }\n\n    const cancelClicked = (e) => {\n        var parentElement = e.target.closest('.cp-editable');\n        parentElement.classList.toggle('editing');\n        // console.log('Cancel pressed')\n        // console.log(quills[getCssSelector(parentElement)].getText());\n        // quills[getCssSelector(parentElement)].setText(\"\");\n        // Manually hide\n        parentElement.querySelector('.ql-toolbar').style.display = \"none\";\n        parentElement.querySelector('.ql-container').style.display = \"none\";\n\n        // quills[getCssSelector(parentElement)].disable();//enable(false);\n        // delete quills[getCssSelector(parentElement)];\n        // parentElement.textContent = quills[getCssSelector(parentElement)].getText();\n        parentElement.innerHTML = quills[getCssSelector(parentElement)].getHTML();// + parentElement.innerHTML;\n        // console.log(\"parentElement.textContent: \", parentElement.textContent);\n        \n        // // Redefine click events for buttons.\n        // Recreates everything.\n        addEditButton();\n    }\n\n    // Save this field to the DB\n    const saveClicked = async (e) => {\n        var parentElement = e.target.closest('.cp-editable');\n        parentElement.classList.toggle('editing');\n        \n        // Update local DOM\n        // var quill = quills[getCssSelector(parentElement)];\n        var currentText = quills[getCssSelector(parentElement)].getHTML();//document.querySelector('.ql-editor').textContent;//Not working => quill.getText();\n        console.log('got text: ', currentText)\n\n        // parentElement.textContent = currentText;\n        parentElement.innerHTML = currentText;\n        console.log(currentData);\n        const dbObj = currentData;\n        console.log(\"Loaded dbObj: \", dbObj);\n        var sections = parentElement.id.split(/-|~/g);\n        // sections.unshift(\"obj\");\n        console.log(\"el.id: \", parentElement.id);\n        console.log(\"sections: \", sections);\n        var val = extractElementContent(parentElement);\n        \n        // console.log(JSON.stringify(newObj));\n        console.log(\"Sending: \", sections, val);\n\n        window.parent.postMessage({\n            actionType: 'finishedEdit',\n            sections: sections,\n            val: val,\n        }, '*');\n\n        addEditButton();\n    }\n\n    const extractElementContent = (el) => {\n        console.log('Extracting text from: ', el, el.innerHTML);\n        // var matchIndex = el.innerHTML.indexOf('<div class=\"editor-wrapper\"');\n        // var firstText = el.innerHTML;//.substring(0, matchIndex);\n        // console.log('firstText: ', firstText);\n        return el.innerHTML;//firstText;//el.textContent.replace(/EditSaveCancel/,'');\n    }\n\n\n    const toolbarOptions = [\n        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n        ['blockquote', 'code-block'],\n      \n        [{ 'header': 1 }, { 'header': 2 }],               // custom button values\n        [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n        [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\n        // [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\n        // [{ 'direction': 'rtl' }],                         // text direction\n      \n        [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n      \n        [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n        [{ 'font': [] }],\n        [{ 'align': [] }],\n      \n        ['clean']                                         // remove formatting button\n    ];\n\n    const createEditInput = (e) => {\n        // console.log('Creating edit input');\n        var el = e.target;\n        var parentElement = el.closest('.cp-editable');\n        parentElement.classList.toggle('editing');\n        // console.log('parentElement: ', parentElement.innerHTML);\n        // // var m = parentElement.innerHTML.match(/^[^<]*/);\n        // var m = parentElement.innerHTML.match(/.+?(?=<div class=\"editor\")/s);\n        // console.log(m);\n        // var currentText = m[0].trim();\n        // var regexp = new RegExp(m[0]);\n        var matchIndex = parentElement.innerHTML.indexOf('<div class=\"editor-wrapper\"');\n        var firstText = parentElement.innerHTML.substring(0, matchIndex);\n        // var secondText = parentElement.innerHTML.substring(matchIndex);\n\n        // console.log(\"first text: \", firstText);\n        // console.log(\"second text: \", secondText);\n        \n        // var inp = document.createElement(\"input\");\n        if(!parentElement.querySelector('.ql-toolbar')){\n            \n            var quill = new Quill(parentElement.querySelector('.editor-wrapper'), { //getCssSelector(parentElement)\n                modules: { toolbar: toolbarOptions },\n                theme: 'snow'\n            });\n            // var currentText = parentElement.innerHTML;//.replace(/EditSaveCancel$/,'');\n            // console.log('currentText: ', currentText);\n             // Match until the first <, which denotes HTML postfixes.\n            // console.log(\"m[0]: \", m[0]);\n            // currentText = m[0].trim();\n            // console.log('inner html: ', parentElement.innerHTML);\n            // console.log(\"replaced: \", parentElement.innerHTML.replace(regexp, ''));\n            \n            // quill.setText(currentText);\n            // quill.setHTML(currentText);\n            // parentElement.innerHTML = parentElement.innerHTML.replace(regexp, '');\n            parentElement.innerHTML = parentElement.innerHTML.replace(firstText, '');\n            quill.setHTML(firstText);\n            // parentElement.innerHTML = secondText;\n\n            quills[getCssSelector(parentElement)] = quill;\n        } else {\n            // Editor already exists, just show it\n            parentElement.querySelector('.ql-toolbar').style.display = \"block\";\n            parentElement.querySelector('.ql-container').style.display = \"block\";\n            // var currentText = parentElement.textContent;\n            // currentText = currentText.replace(/EditSaveCancel$/,'');\n            // currentText = m[0].trim();\n            // var replaceText = new RegExp(currentText + \"EditSaveCancel\");\n            // parentElement.innerHTML = parentElement.innerHTML.replace(regexp, '');\n            parentElement.innerHTML = parentElement.innerHTML.replace(firstText, '');\n            // parentElement.innerHTML = secondText;\n            quills[getCssSelector(parentElement)].setHTML(firstText);\n            // quills[getCssSelector(parentElement)].setText(currentText);\n        }\n\n        // Redefine click events for buttons.\n        parentElement.querySelector('.cp-editable-cancel-btn').onclick = (e) => {\n            cancelClicked(e);\n        }\n        parentElement.querySelector('.cp-editable-save-btn').onclick = (e) => {\n            saveClicked(e);\n        }\n        // const toolbar = document.createElement('div');\n        // toolbar.innerHTML = `<div id=\"toolbar\">\n        //     <button class=\"ql-bold\">Bold</button>\n        //     <button class=\"ql-italic\">Italic</button>\n        // </div>`;\n\n        // parentElement.appendChild(toolbar);\n        // parentElement.appendChild(editor);\n        // console.log(quills);\n    }\n\n\n\n    const highlightEditable = () => {\n        if(!editing)\n            setEditing(true);\n\n        addEditButton();\n\n        // Attach CSS to head\n        document.head.insertAdjacentHTML('beforeend', `\n            <style>\n                .cp-editable {\n                    border: 2px solid black;\n                    position: relative;\n                }\n                .cp-editable::after {\n                    content: \"\";\n                    background-color: rgba(0,0,0,0.1);\n                    position: absolute;\n                    bottom: 0;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    pointer-events: none;\n                }\n                .cp-editable.editing::after {\n                    opacity: 0;\n                }\n                .cp-editable-btn-wrapper {\n                    position: absolute;\n                    /* box-shadow: 0px 0px 2px rgba(255,255,255,0.5); */\n                    z-index: 1;\n                    right: 0;\n                    bottom: -5px;\n                    display: flex;\n                    justify-content: space-evenly;\n                    align-items: center;\n                    transition: all 100ms ease-in-out;\n                }\n                .cp-editable-btn,\n                .cp-editable-save-btn,\n                .cp-editable-cancel-btn {\n                    background-color: black;\n                    color: white;\n                    padding: 2px 4px;\n                    width: 50px;\n                    font-size: 12px;\n                    border-radius: 4px;\n                    border: 1px solid rgba(150,150,150,0.5);\n                    cursor: pointer;\n                    line-height: normal;\n                    font-weight: 200;\n                    margin-left: 5px;\n                }\n                .cp-editable-btn:hover,\n                .cp-editable-save-btn:hover,\n                .cp-editable-cancel-btn:hover {\n                    background-color: rgb(50,50,50);\n                }\n                .cp-editable.editing .cp-editable-btn {\n                    display: none;\n                }\n                .cp-editable .cp-editable-save-btn,\n                .cp-editable .cp-editable-cancel-btn {\n                    display: none;\n                }\n                .cp-editable.editing .cp-editable-save-btn,\n                .cp-editable.editing .cp-editable-cancel-btn {\n                    display: block;\n                }\n            </style>\n        `)\n    }\n\n    return \"\";\n}","import React from 'react'\n\nimport CMS from 'firestore-cms-iframe'\n\nconst App = () => {\n  return <CMS />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}