{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Quill","document","quills","allowedOrigin","templates","useState","editing","setEditing","setCurrentData","setCurrentImageId","useEffect","window","Boolean","e","receivedMessage","evt","setInterval","addEditButton","highlightEditable","console","head","link","Array","el","dw","d","editorContainer","d2","d3","saveClicked","cancelClicked","createEditInput","createImageUpload","childrenElements","i","dm","minus","parentElement","actionType","sections","getSections","identifier","index","id","plus","obj","constructArrayObj","m","getCssSelector","currentText","val","extractElementContent","s","toolbarOptions","matchIndex","firstText","quill","modules","toolbar","theme","formats","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.33843683.chunk.js","sourcesContent":["// This has been moved to npm package firestore-cms-iframe.\n\nimport React, {useEffect, useState, ReactDOM} from 'react';\n// This is shared code for all CMS listeners.\n// Listens to events from login.<domain-name>.craftie.xyz, \n// Edits the page after events are received.\nimport Quill from 'quill';\n// import ReactQuill from 'react-quill';\n// import 'react-quill/dist/quill.snow.css';\nimport getCssSelector from 'css-selector-generator';\n// import htmlToText from 'html-to-text';\n\nQuill.prototype.getHTML = () => {\n    return document.querySelector('.ql-editor').innerHTML;\n};\n\nQuill.prototype.setHTML = (html) => {\n    document.querySelector('.ql-editor').innerHTML = html;\n}\n\nconst quills = {};\n\nexport default function CMS({\n    allowedOrigin,\n    templates,\n}){\n\n    const [editing, setEditing] = useState(/*TODO make this false */true);\n    // const [showEditor, setShowingEditor] = useState();\n    const [currentData, setCurrentData] = useState();\n    const [currentImageId, setCurrentImageId] = useState();\n    \n    useEffect(()=>{\n        // Listen to CMS websitecontent editing events.\n        window.addEventListener(\"message\", receivedMessage, false);\n\n        // TODO remove this, this is only to be prompted by the parent from Craftie.xyz.\n        // highlightEditable({origin: allowedOrigin, data: \"startEdit\"});\n        window.onclick = (e) => {\n            // console.log(\"something was clicked: \", e.target);\n            var isEditingContainer = Boolean(e.target.closest(\".cp-editable.editing\"));\n            if(isEditingContainer){\n                // console.log('BLOCKING');\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            // if(e.target.classList.contains('ql-editor')){\n            //     e.preventDefault();\n            //     e.stopPropagation();\n            // }\n        }\n    }, []);\n\n    // Handles received messages from parent.\n    const receivedMessage = (evt) => {\n        // 'highlight'\n        if(!evt.origin.includes(allowedOrigin)) return;\n        if(evt.data.actionType === \"initEditing\"){\n            setInterval(() => {\n                addEditButton();\n            }, 1500);\n        }\n        else if(evt.data.actionType === 'startEdit'){\n            highlightEditable();\n            setCurrentData(evt.data.websiteContent);\n        }\n        else if(evt.data.actionType === 'updateElement'){\n            // document.getElementById(currentFileId).classList.toggle('editing');\n            document.getElementById(evt.data.identifier).src = evt.data.file.url;\n        }\n        else if(evt.data.actionType === 'updateArray'){\n            console.log('RECEIVED UPDATING ARRAY: ', evt.data);\n            setCurrentData(evt.data.newWebsiteContent);\n            window.location.reload();\n        }\n        \n        // else if(evt.data.actionType === 'cancelSaveFile'){\n        //     document.getElementById(currentFileId).classList.toggle('editing');\n        // }\n    }\n\n    useEffect(() => {\n        var head = document.head;\n        var link = document.createElement(\"link\");\n    \n        link.type = \"text/css\";\n        link.rel = \"stylesheet\";\n        link.href = \"https://cdn.quilljs.com/1.3.6/quill.snow.css\";\n    \n        head.appendChild(link);\n    \n        return () => { head.removeChild(link); }\n    }, []);\n\n    const addEditButton = () => {\n        // Text\n        const elements = Array.from(\n            document.querySelectorAll('.cp-editable')\n        );\n        for(var el of elements){\n\n            if(!el.querySelector('.cp-editable-btn')){\n                const dw = document.createElement('div');\n                dw.classList.add(\"cp-editable-btn-wrapper\");\n                const d = document.createElement('div');\n                const editorContainer = document.createElement('div');\n                d.textContent = \"Edit\";\n                // const img = document.createElement('img');\n                // img.src = \"\";\n                d.classList.add('cp-editable-btn');\n                editorContainer.classList.add('editor-wrapper');\n                \n                const d2 = document.createElement('div');\n                d2.textContent = \"Save\";\n                d2.classList.add('cp-editable-save-btn');\n                \n\n                const d3 = document.createElement('div');\n                d3.textContent = \"Cancel\";\n                d3.classList.add('cp-editable-cancel-btn');\n                \n                d2.onclick = (e) => {\n                    saveClicked(e);\n                }\n\n                d3.onclick = (e) => {\n                    cancelClicked(e);\n                }\n                \n                d.onclick = (e) => {\n                    createEditInput(e);\n                }\n                el.appendChild(editorContainer);\n                dw.appendChild(d);\n                dw.appendChild(d2);\n                dw.appendChild(d3);\n                el.appendChild(dw);\n            }\n\n        }\n\n        // Images\n        const imgElements = Array.from(\n            document.querySelectorAll('.cp-editable-img')\n        );\n        for(var el of imgElements){\n            if(!el.parentElement.querySelector('.cp-editable-img-btn')){\n                el.parentElement.style.position = \"relative\";\n                const dw = document.createElement('div');\n                dw.classList.add(\"cp-editable-img-wrapper\");\n                const d = document.createElement('div');\n                d.textContent = \"Change Image\";\n\n                d.classList.add('cp-editable-img-btn');\n                \n                // const d2 = document.createElement('div');\n                // d2.textContent = \"Save\";\n                // d2.classList.add('cp-editable-img-save-btn');\n                \n                // const d3 = document.createElement('div');\n                // d3.textContent = \"Cancel\";\n                // d3.classList.add('cp-editable-img-cancel-btn');\n\n                // d2.onclick = (e) => {\n                //     saveImageClicked(e);\n                // }\n                // d3.onclick = (e) => {\n                //     cancelImageClicked(e);\n                // }\n                d.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    createImageUpload(e);\n                }\n                dw.appendChild(d);\n                // dw.appendChild(d2);\n                // dw.appendChild(d3);\n                el.parentElement.insertBefore(dw, el.nextSibling);\n            }\n        }\n\n        // Lists\n        const arrayElements = Array.from(\n            document.querySelectorAll('.cp-editable-array')\n        );\n        for(var el of arrayElements){\n            if(!el.querySelector('.cp-editable-array-minus-wrapper')){\n                \n                // Put remove button on direct child div.\n                var childrenElements = Array.from(\n                    el.querySelectorAll(':scope > *:not(.cp-editable-array-plus-wrapper)')\n                );\n\n                for(var i=0;i<childrenElements.length;i++){\n                    const dm = document.createElement('div');\n                    dm.classList.add('cp-editable-array-minus-wrapper');\n                    const minus = document.createElement('div');\n                    minus.textContent = \"X\";// .innerHTML = \"&#9587;\";\n                    minus.classList.add('cp-editable-array-minus');\n                    minus.id = i;\n                    dm.style.position = \"relative\";\n                    dm.appendChild(minus);\n                    childrenElements[i].appendChild(dm);\n\n                    minus.onclick = (e) => {\n                        var parentElement = e.target.closest('.cp-editable-array');//e.target.parentElement.parentElement;\n                        window.parent.postMessage({\n                            actionType: 'removeFromArray',\n                            sections: getSections(parentElement.id),\n                            identifier: parentElement.id,\n                            index: e.target.id,\n                            // obj: constructArrayObj(e.target.parentElement)\n                        }, '*');\n                    }\n                }\n                el.style.position = \"relative\";\n            }\n            if(!el.querySelector('.cp-editable-array-plus')){\n                // Search only for direct children with :scope pseudo-class.\n                const dw = document.createElement('div');\n                dw.classList.add(\"cp-editable-array-plus-wrapper\");\n                const plus = document.createElement('div');\n                plus.textContent = \"+\";\n                plus.classList.add('cp-editable-array-plus');\n\n                dw.appendChild(plus);   \n                el.appendChild(dw);\n\n                plus.onclick = (e) => {\n                    // console.log(\"parentElement: \", e.target.closest('.cp-editable-array').querySelector('> *:not(.cp-editable-array-plus-wrapper)'));\n                    // Find first child that is not the plus div.\n                    var parentElement = e.target.parentElement;//e.target.closest('.cp-editable-array').querySelector('> *:not(.cp-editable-array-plus-wrapper)');//e.target.parentElement.parentElement;\n                    var obj = constructArrayObj(parentElement);\n                    window.parent.postMessage({\n                        actionType: 'addToArray',\n                        sections: getSections(parentElement.closest('.cp-editable-array').id),\n                        identifier: parentElement.closest('.cp-editable-array').id,\n                        obj: obj,\n                    }, '*');\n                }\n            }\n        }\n    }\n\n    // Provided with an element, construct an element by detecting all children types and creating them.\n    // These are found by looking for id's of the form 'asd-0-etc'\n    const constructArrayObj = (parentElement) => {\n        const singleInstance = [];\n        // console.log(parentElement)\n        // Find all elements with an 'id' attribute\n        // Assume that direct child is the right type.\n        // console.log(\"children: \", parentElement.closest('.cp-editable-array').querySelector(':scope > *'))\n        // var childElement = parentElement.closest('.cp-editable-array')\n            // .querySelector(':scope > *:not(.cp-editable-array-plus-wrapper)')\n            // .querySelector(':scope > .cp-editable')\n        // if(childElement){\n        //         //.querySelector(':scope > *:not(.cp-editable-array-plus-wrapper)')/*parentElement.firstChild*/);\n        //     for(var el of Array.from(childElement\n        //             // .closest('.cp-editable-array')\n        //             // .querySelector(':scope > *')\n        //             // .querySelector(':scope > *:not(.cp-editable-array-plus-wrapper)')\n        //             .querySelectorAll(\"[id]\"))){\n        //                 console.log('Found element: ', el);\n        //         if(!el.classList.contains(\"cp-editable-array-minus\")){\n        //             var m = el.id.match(/[a-zA-Z0-9]+$/);\n        //             console.log(m, m[0]);\n        //             singleInstance.push({\n        //                 type: el.tagName.toLowerCase(),\n        //                 value: m[0],\n        //             });\n        //         }\n        //     }\n        // } else {\n            // None exists, use template information\n            console.log('USING TEMPLATE] ', parentElement.closest('.cp-editable-array').id);\n            var m = parentElement.closest('.cp-editable-array').id.match(/[a-zA-Z0-9_]+$/);\n            return templates[m[0]];\n        // }\n        // console.log(singleInstance);\n        return singleInstance;\n        // for(var t of [\".cp-editable\",\".cp-editable-img\",\".cp-editable-array\"]){\n        //     for(var element of Array.from(parentElement.querySelectorAll(t))){\n\n        //     }\n        // }\n    }\n\n    const cancelClicked = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        // Show all other \"edit\" buttons because prone to bugs when editing two at once.\n        Array.from(document.querySelectorAll('.cp-editable-btn')).forEach(el => {\n            el.style.display = \"block\";\n        });\n\n        var parentElement = e.target.closest('.cp-editable');\n        parentElement.classList.toggle('editing');\n        // quills[getCssSelector(parentElement)].setText(\"\");\n        // Manually hide\n        parentElement.querySelector('.ql-toolbar').style.display = \"none\";\n        parentElement.querySelector('.ql-container').style.display = \"none\";\n\n        // quills[getCssSelector(parentElement)].disable();//enable(false);\n        // delete quills[getCssSelector(parentElement)];\n        // parentElement.textContent = quills[getCssSelector(parentElement)].getText();\n        parentElement.innerHTML = quills[getCssSelector(parentElement)].getHTML();// + parentElement.innerHTML;\n        \n        // // Redefine click events for buttons.\n        // Recreates everything.\n        addEditButton();\n    }\n\n    // Save this field to the DB\n    const saveClicked = async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        // Show all other \"edit\" buttons because prone to bugs when editing two at once.\n        Array.from(document.querySelectorAll('.cp-editable-btn')).forEach(el => {\n            el.style.display = \"block\";\n        });\n\n        var parentElement = e.target.closest('.cp-editable');\n        parentElement.classList.toggle('editing');\n        \n        // Update local DOM\n        // Update local dom as pure text?\n        // htmlToText\n        // var quill = quills[getCssSelector(parentElement)];\n        var currentText = quills[getCssSelector(parentElement)].getHTML();//document.querySelector('.ql-editor').textContent;//Not working => quill.getText();\n\n        // parentElement.textContent = currentText;\n        parentElement.innerHTML = currentText;\n        const dbObj = currentData;\n        var sections = parentElement.id.split(/-|~/g);\n        // sections.unshift(\"obj\");\n        var val = extractElementContent(parentElement);\n\n        window.parent.postMessage({\n            actionType: 'finishedEdit',\n            sections: sections,\n            val: val,\n        }, '*');\n\n        addEditButton();\n    }\n\n    // const saveImageClicked = () => {\n    //     // var parentElement = e.target.parentElement.previousElementSibling;\n    //     // parentElement.classList.toggle('editing');\n    //     document.getElementById(currentImageId).classList.toggle('editing');\n    //     // Update local DOM\n    //     var sections = currentImageId.split(/-|~/g);\n\n    //     console.log('SENDING Save Image: ', sections, currentFile);\n    //     window.parent.postMessage({\n    //         actionType: 'editFile',\n    //         sections: sections,\n    //         file: currentFile,\n    //         identifier: currentImageId,\n    //     }, '*');\n\n    //     addEditButton();\n    // }\n\n    const getSections = (s) => {\n        var a = s.split(/-|~/g);\n        return a;\n    }\n\n    const createImageUpload = (e) => {\n        var el = e.target;\n        var parentElement = el.parentElement.previousElementSibling;//closest('.cp-editable-img');\n        console.log(\"variables: \", el, parentElement, parentElement.id);\n        parentElement.classList.toggle('editing');\n        // setCurrentFile(imageId);\n        setCurrentImageId(parentElement.id);\n        // setShowingImageUploader(true);\n        window.parent.postMessage({\n            actionType: 'editFile',\n            sections: getSections(parentElement.id),\n            identifier: parentElement.id,\n        }, '*');\n    }\n\n    const extractElementContent = (el) => {\n        // var matchIndex = el.innerHTML.indexOf('<div class=\"editor-wrapper\"');\n        // var firstText = el.innerHTML;//.substring(0, matchIndex);\n        return el.innerHTML;//firstText;//el.textContent.replace(/EditSaveCancel/,'');\n    }\n\n\n    const toolbarOptions = [\n        [{ 'header': [2, false] }],\n        // [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n        ['blockquote', /*'code-block'*/'link'],\n      \n        // [{ 'header': 1 }, { 'header': 2 }],               // custom button values\n        [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n        // [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\n        // [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\n        // [{ 'direction': 'rtl' }],                         // text direction\n      \n        // [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n        // [{ 'font': [] }],\n        [{ 'align': [] }],\n      \n        // ['clean']                                         // remove formatting button\n    ];\n\n    const createEditInput = (e) => {\n        var el = e.target;\n        e.preventDefault();\n        e.stopPropagation();\n        var parentElement = el.closest('.cp-editable');\n        parentElement.classList.toggle('editing');\n\n        // Hide all other \"edit\" buttons because prone to bugs when editing two at once.\n        Array.from(document.querySelectorAll('.cp-editable-btn')).forEach(el => {\n            el.style.display = \"none\";\n        });\n        \n        // // var m = parentElement.innerHTML.match(/^[^<]*/);\n        // var m = parentElement.innerHTML.match(/.+?(?=<div class=\"editor\")/s);\n        // var currentText = m[0].trim();\n        // var regexp = new RegExp(m[0]);\n        var matchIndex = parentElement.innerHTML.indexOf('<div class=\"editor-wrapper\"');\n        var firstText = parentElement.innerHTML.substring(0, matchIndex);\n        // var secondText = parentElement.innerHTML.substring(matchIndex);\n        // console.log('firstText: ', firstText);\n\n        // var inp = document.createElement(\"input\");\n        if(!parentElement.querySelector('.ql-toolbar')){\n            // Kills onclick() events, so has to be placed first.\n            parentElement.innerHTML = parentElement.innerHTML.replace(firstText, '');\n            var quill = new Quill(parentElement.querySelector('.editor-wrapper'), { //getCssSelector(parentElement)\n                modules: { toolbar: toolbarOptions },\n                theme: 'snow',\n                formats: ['bold','header','italic','blockquote','indent','link','strike','script','underline','list','direction','align','image','video'],\n            });\n            // var currentText = parentElement.innerHTML;//.replace(/EditSaveCancel$/,'');\n             // Match until the first <, which denotes HTML postfixes.\n            // currentText = m[0].trim();\n            \n            // quill.setText(currentText);\n            // quill.setHTML(currentText);\n            // parentElement.innerHTML = parentElement.innerHTML.replace(regexp, '');\n\n            quill.setHTML(firstText);\n            // parentElement.innerHTML = secondText;\n\n            quills[getCssSelector(parentElement)] = quill;\n        } else {\n            // Editor already exists, just show it\n            parentElement.querySelector('.ql-toolbar').style.display = \"block\";\n            parentElement.querySelector('.ql-container').style.display = \"block\";\n            // var currentText = parentElement.textContent;\n            // currentText = currentText.replace(/EditSaveCancel$/,'');\n            // currentText = m[0].trim();\n            // var replaceText = new RegExp(currentText + \"EditSaveCancel\");\n            // parentElement.innerHTML = parentElement.innerHTML.replace(regexp, '');\n            parentElement.innerHTML = parentElement.innerHTML.replace(firstText, '');\n            // parentElement.innerHTML = secondText;\n            quills[getCssSelector(parentElement)].setHTML(firstText);\n            // quills[getCssSelector(parentElement)].setText(currentText);\n        }\n\n        // Redefine click events for buttons.\n        parentElement.querySelector('.cp-editable-cancel-btn').onclick = (e) => {\n            cancelClicked(e);\n        }\n        parentElement.querySelector('.cp-editable-save-btn').onclick = (e) => {\n            saveClicked(e);\n        }\n        // const toolbar = document.createElement('div');\n        // toolbar.innerHTML = `<div id=\"toolbar\">\n        //     <button class=\"ql-bold\">Bold</button>\n        //     <button class=\"ql-italic\">Italic</button>\n        // </div>`;\n\n        // parentElement.appendChild(toolbar);\n        // parentElement.appendChild(editor);\n    }\n\n\n\n    const highlightEditable = () => {\n        if(!editing)\n            setEditing(true);\n\n        addEditButton();\n\n        // Attach CSS to head\n        document.head.insertAdjacentHTML('beforeend', `\n            <style>\n                .cp-editable {\n                    border: 2px solid black;\n                    position: relative;;\n                }\n                .cp-editable.editing {\n                    pointer-events: all!important\n                }\n                .cp-editable::after {\n                    content: \"\";\n                    background-color: rgba(0,0,0,0.1);\n                    position: absolute;\n                    bottom: 0;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    pointer-events: none;\n                }\n                .cp-editable.editing::after {\n                    opacity: 0;\n                }\n                .cp-editable-btn-wrapper {\n                    position: absolute;\n                    /* box-shadow: 0px 0px 2px rgba(255,255,255,0.5); */\n                    z-index: 1;\n                    right: 0;\n                    pointer-events: all;\n                    top: 5px;\n                    display: flex;\n                    justify-content: space-evenly;\n                    align-items: center;\n                    transition: all 100ms ease-in-out;\n                }\n                .cp-editable-btn,\n                .cp-editable-save-btn,\n                .cp-editable-cancel-btn {\n                    background-color: black;\n                    color: white;\n                    padding: 2px 4px;\n                    width: 50px;\n                    font-size: 12px;\n                    border-radius: 4px;\n                    border: 1px solid rgba(150,150,150,0.5);\n                    cursor: pointer;\n                    line-height: normal;\n                    font-weight: 200;\n                    margin-left: 5px;\n                }\n                .cp-editable-btn:hover,\n                .cp-editable-save-btn:hover,\n                .cp-editable-cancel-btn:hover,\n                .cp-editable-img-cancel-btn:hover,\n                .cp-editable-img-save-btn:hover,\n                .cp-editable-img-btn:hover {\n                    background-color: rgb(50,50,50);\n                }\n                .cp-editable.editing .cp-editable-btn,\n                .cp-editable-img.editing .cp-editable-img-btn {\n                    display: none;\n                }\n                .cp-editable .cp-editable-save-btn,\n                .cp-editable .cp-editable-cancel-btn,\n                .cp-editable-img .cp-editable-img-cancel-btn,\n                .cp-editable-img .cp-editable-img-save-btn {\n                    display: none;\n                }\n                .cp-editable.editing .cp-editable-save-btn,\n                .cp-editable.editing .cp-editable-cancel-btn,\n                .cp-editable-img-btn.editing .cp-editable-img-cancel-btn,\n                .cp-editable-img-btn.editing .cp-editable-img-save-btn {\n                    display: block;\n                }\n\n                .ql-editor {\n                    white-space: normal;\n                }\n\n                .ql-toolbar, \n                .editor-wrapper,\n                .ql-editor,\n                .ql-editor * {\n                    background-color: white!important;\n                    color: black!important;\n                    line-height: normal!important;\n                    text-align: initial!important;\n                }\n\n                /* White space is weird in editor, so set to default */\n                .ql-editor p, \n                .ql-editor h2 {\n                    margin: 1em 0!important;\n                }\n\n                .cp-editable-img-btn {\n                    position: relative;\n                    border: 2px solid black;\n                    background-color: black;\n                    color: white;\n                    white-space: nowrap;\n                    padding: 2px 4px;\n                    width: fit-content;\n                    font-size: 12px;\n                    border-radius: 4px;\n                    border: 1px solid rgba(150,150,150,0.5);\n                    cursor: pointer;\n                    line-height: normal;\n                    font-weight: 200;\n                    margin-left: 5px;\n                }\n                .cp-editable-img-wrapper {\n                    position: absolute;\n                    z-index: 1;\n                    right: 0;\n                    bottom: 5px;\n                    display: flex;\n                    justify-content: space-evenly;\n                    align-items: center;\n                    transition: all 100ms ease-in-out;\n                }\n\n                .cp-editable-array-minus-wrapper {\n                    position: relative;\n                }\n                .cp-editable-array-minus {\n                    position: absolute;\n                    bottom: 5px;\n                    right: 5px;\n                    /*top: 50%;*/\n                    /*transform: translateY(-50%);*/\n                    border: 1px solid rgba(150,150,150,0.5);\n                    border-radius: 4px;\n                    font-size: 20px;\n                    background-color: black;\n                    font-weight: 800;\n                    line-height: 20px;\n                    padding: 5px 10px;\n                    color: white;\n                    cursor: pointer;\n                }\n                .cp-editable-array-plus-wrapper {\n                    position: absolute;\n                    right: 10px;\n                    bottom: 0px;\n                }\n                .cp-editable-array-plus {\n                    position: absolute;\n                    bottom: -35px;\n                    right: 0px;\n                    background-color: black;\n                    border: 1px solid rgba(150,150,150,0.5);\n                    border-radius: 4px;\n                    font-size: 25px;\n                    color: white;\n                    font-weight: 800;\n                    line-height: 20px;\n                    padding: 5px 10px;\n                    cursor: pointer;\n\n                }\n                .cp-editable-array-plus:hover ,\n                .cp-editable-array-minus:hover {\n                    opacity: .75;\n                }\n            </style>\n        `)\n    }\n\n    return \"\";\n}\n\n\n","import React from 'react'\n\nimport CMS from 'firestore-cms-iframe'\n\nconst App = () => {\n  return <CMS allowedOrigin=\"<example-domain.com>\" templates={{}} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}